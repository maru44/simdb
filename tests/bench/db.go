// Code generated by "github.com/maru44/simdb/gen"; DO NOT EDIT.

package bench

import (
	"fmt"
	"sync"
)

type (
	bench struct {
		Name    string
		Email   string
		age     uint
		IsValid bool
	}

	benchs struct {
		data map[int]bench
		sync.RWMutex
	}
)

func NewBenchs() benchs {
	return benchs{
		data: map[int]bench{},
	}
}

func (t *benchs) List() map[int]bench {
	t.RLock()
	defer t.RUnlock()
	return t.data
}

func (t *benchs) Exists(id int) bool {
	t.RLock()
	defer t.RUnlock()
	_, ok := t.data[id]
	return ok
}

func (t *benchs) Get(id int) (bench, error) {
	t.RLock()
	defer t.RUnlock()
	v, ok := t.data[id]
	if !ok {
		return bench{}, fmt.Errorf("Not Exists: %v", id)
	}
	return v, nil
}

func (t *benchs) Insert(id int, value bench) error {
	t.Lock()
	defer t.Unlock()
	if _, ok := t.data[id]; ok {
		return fmt.Errorf("Duplicate Entry: %v", id)
	}
	t.data[id] = value
	return nil
}

func (t *benchs) BulkInsert(values map[int]bench) error {
	t.Lock()
	defer t.Unlock()
	for id := range values {
		if _, ok := t.data[id]; ok {
			return fmt.Errorf("Duplicate Entry: %v", id)
		}
	}
	for id, value := range values {
		t.data[id] = value
	}
	return nil
}

func (t *benchs) Update(id int, value bench) error {
	t.Lock()
	defer t.Unlock()
	if _, ok := t.data[id]; !ok {
		return fmt.Errorf("Does not exists: %v", id)
	}
	t.data[id] = value
	return nil
}

func (t *benchs) Upsert(id int, value bench) {
	t.Lock()
	defer t.Unlock()
	t.data[id] = value
}

func (t *benchs) BulkUpsert(values map[int]bench) {
	t.Lock()
	defer t.Unlock()
	for id, value := range values {
		t.data[id] = value
	}
}

func (t *benchs) Delete(id int) {
	t.Lock()
	defer t.Unlock()
	delete(t.data, id)
}

func (t *benchs) BulkDelete(ids []int) {
	t.Lock()
	defer t.Unlock()
	for _, id := range ids {
		delete(t.data, id)
	}
}

func (t *benchs) Truncate() {
	t.Lock()
	defer t.Unlock()
	t.data = map[int]bench{}
}
