// Code generated by "github.com/maru44/simdb/gen"; DO NOT EDIT.

package main

import (
	"errors"
	"sync"
)

type (
	TableA struct {
		Name      int32
		ExpiredAt int64
		IsExpired bool
	}

	TableAs struct {
		Data map[uint]TableA
		sync.RWMutex
	}
)

func NewTableA() TableAs {
	return TableAs{
		Data: map[uint]TableA{},
	}
}

func (t *TableAs) Get(id uint) (TableA, error) {
	t.RLock()
	defer t.RUnlock()
	v, ok := t.Data[id]
	if !ok {
		return TableA{}, errors.New("Not Exists")
	}
	return v, nil
}

func (t *TableAs) Insert(id uint, value TableA) error {
	t.Lock()
	if _, ok := t.Data[id]; ok {
		return errors.New("Duplicate Entry")
	}
	defer t.Unlock()
	t.Data[id] = value
	return nil
}

func (t *TableAs) BulkInsert(values map[uint]TableA) error {
	t.Lock()
	defer t.Unlock()
	for id, value := range values {
		if _, ok := t.Data[id]; ok {
			return errors.New("Duplicate Entry")
		}
		t.Data[id] = value
	}
	return nil
}

func (t *TableAs) Update(id uint, value TableA) error {
	t.Lock()
	defer t.Unlock()
	if _, ok := t.Data[id]; !ok {
		return errors.New("Not Exists")
	}
	t.Data[id] = value
	return nil
}

func (t *TableAs) Upsert(id uint, value TableA) {
	t.Lock()
	defer t.Unlock()
	t.Data[id] = value
}

func (t *TableAs) BulkUpsert(values map[uint]TableA) {
	t.Lock()
	defer t.Unlock()
	for id, value := range values {
		t.Data[id] = value
	}
}

func (t *TableAs) Delete(id uint) {
	t.Lock()
	defer t.Unlock()
	delete(t.Data, id)
}

func (t *TableAs) Truncate() {
	t.Lock()
	defer t.Unlock()
	t.Data = map[uint]TableA{}
}
