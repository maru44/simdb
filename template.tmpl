// Code generated by "github.com/maru44/simdb/gen"; DO NOT EDIT.

package {{ $.PackageName }}

import (
    "errors"
    "sync"
)

type (
    {{ $.Name }} struct {
        {{ range $c := $.Columns -}}
            {{ if not $c.IsPrimaryKey }} {{ $c.Name }} {{ $c.Type }} {{ end }}
        {{ end -}}
    }

    {{ $.Name }}s struct {
        Data map[ {{ $.PrimaryKeyType }} ]{{ $.Name }}
        sync.RWMutex
    }
)

func New{{ $.Name }}() {{ $.Name }}s {
    return {{ $.Name }}s{
        Data: map[ {{ $.PrimaryKeyType }} ]{{ $.Name }}{},
    }
}

func (t *{{ $.Name }}s) Get(id {{ $.PrimaryKeyType }} ) ({{ $.Name }}, error) {
    t.RLock()
    defer t.RUnlock()
    v, ok := t.Data[id]
    if !ok {
        return {{ $.Name }}{}, errors.New("Not Exists")
    }
    return v, nil
}

func (t *{{ $.Name }}s) Insert(id {{ $.PrimaryKeyType }}, value {{ $.Name }} ) error {
    t.Lock()
    if _, ok := t.Data[id]; ok {
        return errors.New("Duplicate Entry")
    }
    defer t.Unlock()
    t.Data[id] = value
    return nil
}

func (t *{{ $.Name }}s) BulkInsert(values map[{{ $.PrimaryKeyType }}]{{ $.Name }}) error {
    t.Lock()
    defer t.Unlock()
    for id, value := range values {
        if _, ok := t.Data[id]; ok {
            return errors.New("Duplicate Entry")
        }
        t.Data[id] = value
    }
    return nil
}

func (t *{{ $.Name }}s) Update(id {{ $.PrimaryKeyType }}, value {{ $.Name }} ) error {
    t.Lock()
    defer t.Unlock()
   if _, ok := t.Data[id]; !ok {
        return errors.New("Not Exists")
    }
    t.Data[id] = value
    return nil
}

func (t *{{ $.Name }}s) Upsert(id {{ $.PrimaryKeyType }}, value {{ $.Name }} ) {
    t.Lock()
    defer t.Unlock()
    t.Data[id] = value
}

func (t *{{ $.Name }}s) BulkUpsert(values  map[{{ $.PrimaryKeyType }}]{{ $.Name }}) {
    t.Lock()
    defer t.Unlock()
    for id, value := range values {
        t.Data[id] = value
    }
}

func (t *{{ $.Name }}s) Delete(id {{ $.PrimaryKeyType }}) {
    t.Lock()
    defer t.Unlock()
    delete(t.Data, id)
}

func (t *{{ $.Name }}s) Truncate() {
    t.Lock()
    defer t.Unlock()
    t.Data = map[ {{ $.PrimaryKeyType }} ]{{ $.Name }}{}
}
