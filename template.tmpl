// Code generated by "github.com/maru44/simdb/gen"; DO NOT EDIT.

package {{ $.PackageName }}

import (
    "fmt"
)

type (
    {{ $ | camel }} struct {
        {{ range $c := $.Columns -}}
            {{ $c | camel }} {{ $c.Type }}
        {{ end -}}
    }

    {{ $ | camel }}s struct {
        data map[ {{ $.KeyType }} ]{{ $ | camel }}
        sync.RWMutex
    }
)

func New{{ $.Name | upperCamel }}s() {{ $ | camel }}s {
    return {{ $ | camel }}s{
        data: map[ {{ $.KeyType }} ]{{ $ | camel }}{},
    }
}

func (t *{{ $ | camel }}s) List() map[ {{ $.KeyType }} ]{{ $ | camel }} {
    t.RLock()
    defer t.RUnlock()
    return t.data
}

func (t *{{ $ |camel }}s) Exists(id {{ $.KeyType }}) bool {
    t.RLock()
    defer t.RUnlock()
    _, ok := t.data[id]
    return ok
}

func (t *{{ $ | camel }}s) Get(id {{ $.KeyType }} ) (*{{ $ | camel }}, error) {
    t.RLock()
    defer t.RUnlock()
    v, ok := t.data[id]
    if !ok {
        return nil, fmt.Errorf("Not Exists: %v", id)
    }
    return &v, nil
}

func (t *{{ $ | camel }}s) Load(id {{ $.KeyType }}) (*{{ $ | camel }}, bool) {
    t.RLock()
    defer t.RUnlock()
    v, ok := t.data[id]
    return &v, ok
}

func (t *{{ $ | camel }}s) Insert(id {{ $.KeyType }}, value {{ $ | camel }} ) error {
    t.Lock()
    defer t.Unlock()
    if _, ok := t.data[id]; ok {
        return fmt.Errorf("Duplicate Entry: %v", id)
    }
    t.data[id] = value
    return nil
}

func (t *{{ $ | camel }}s) BulkInsert(values map[{{ $.KeyType }}]{{ $ | camel }}) error {
    t.Lock()
    defer t.Unlock()
    for id := range values {
        if _, ok := t.data[id]; ok {
            return fmt.Errorf("Duplicate Entry: %v", id)
        }
    }
    for id, value := range values {
        t.data[id] = value
    }
    return nil
}

func (t *{{ $ | camel }}s) Update(id {{ $.KeyType }}, value {{ $ | camel }} ) error {
    t.Lock()
    defer t.Unlock()
    if _, ok := t.data[id]; !ok {
        return fmt.Errorf("Does not exists: %v", id)
    }
    t.data[id] = value
    return nil
}

func (t *{{ $ | camel }}s) Upsert(id {{ $.KeyType }}, value {{ $ | camel }} ) {
    t.Lock()
    defer t.Unlock()
    t.data[id] = value
}

func (t *{{ $ | camel }}s) BulkUpsert(values  map[{{ $.KeyType }}]{{ $ | camel }}) {
    t.Lock()
    defer t.Unlock()
    for id, value := range values {
        t.data[id] = value
    }
}

func (t *{{ $ | camel }}s) Delete(id {{ $.KeyType }}) {
    t.Lock()
    defer t.Unlock()
    delete(t.data, id)
}

func (t *{{ $ | camel }}s) BulkDelete(ids []{{ $.KeyType }}) {
    t.Lock()
    defer t.Unlock()
    for _, id := range ids {
        delete(t.data, id)
    }
}

func (t *{{ $ | camel }}s) Truncate() {
    t.Lock()
    defer t.Unlock()
    t.data = map[ {{ $.KeyType }} ]{{ $ | camel }}{}
}
