// Code generated by "github.com/maru44/simdb/gen"; DO NOT EDIT.

package {{ $.PackageName }}

import (
    "errors"
)

type (
    {{ $.Name | camel }} struct {
        {{ range $c := $.Columns -}}
            {{ if not $c.IsKey }} {{ $c.Name | camel }} {{ $c.Type }} {{ end }}
        {{ end -}}
    }

    {{ $.Name | camel }}s struct {
        Data map[ {{ $.KeyType }} ]{{ $.Name | camel }}
        sync.RWMutex
    }
)

func (t *{{ $.Name | camel }}s) Get(id {{ $.KeyType }} ) ({{ $.Name | camel }}, error) {
    t.RLock()
    defer t.RUnlock()
    v, ok := t.Data[id]
    if !ok {
        return {{ $.Name | camel }}{}, errors.New("Not Exists")
    }
    return v, nil
}

func (t *{{ $.Name | camel }}s) Insert(id {{ $.KeyType }}, value {{ $.Name | camel }} ) error {
    t.Lock()
    defer t.Unlock()
    if _, ok := t.Data[id]; ok {
        return errors.New("Duplicate Entry")
    }
    t.Data[id] = value
    return nil
}

func (t *{{ $.Name | camel }}s) BulkInsert(values map[{{ $.KeyType }}]{{ $.Name | camel }}) error {
    t.Lock()
    defer t.Unlock()
    for id, value := range values {
        if _, ok := t.Data[id]; ok {
            return errors.New("Duplicate Entry")
        }
        t.Data[id] = value
    }
    return nil
}

func (t *{{ $.Name | camel }}s) Update(id {{ $.KeyType }}, value {{ $.Name | camel }} ) error {
    t.Lock()
    defer t.Unlock()
    if _, ok := t.Data[id]; !ok {
        return errors.New("Not Exists")
    }
    t.Data[id] = value
    return nil
}

func (t *{{ $.Name | camel }}s) Upsert(id {{ $.KeyType }}, value {{ $.Name | camel }} ) {
    t.Lock()
    defer t.Unlock()
    t.Data[id] = value
}

func (t *{{ $.Name | camel }}s) BulkUpsert(values  map[{{ $.KeyType }}]{{ $.Name | camel }}) {
    t.Lock()
    defer t.Unlock()
    for id, value := range values {
        t.Data[id] = value
    }
}

func (t *{{ $.Name | camel }}s) Delete(id {{ $.KeyType }}) {
    t.Lock()
    defer t.Unlock()
    delete(t.Data, id)
}

func (t *{{ $.Name | camel }}s) Truncate() {
    t.Lock()
    defer t.Unlock()
    t.Data = map[ {{ $.KeyType }} ]{{ $.Name | camel }}{}
}
